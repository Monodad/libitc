library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

use work.itc.all;
use work.itc_lcd.all;


entity itc111_1 is
	port
	(
		clk, rst_n : in std_logic;

		-- sw
		sw : in u8r_t;
		
		-- dht
		dht_data : inout std_logic;

		--seg
		seg_led, seg_com : out u8r_t;
		
		-- key
		key_row : in u4r_t;
		key_col : out u4r_t;

		-- tts
		tts_scl, tts_sda : inout std_logic;
		tts_mo           : in unsigned(2 downto 0);
		dbg_b			 : out u8r_t;
		tts_rst_n        : out std_logic;

		-- lcd
		lcd_sclk, lcd_mosi, lcd_ss_n, lcd_dc, lcd_bl, lcd_rst_n : out std_logic
	);
end itc111_1;

architecture arch of itc111_1 is

------------------------------------------------------------------signal
--seg
signal seg_data:string(1 to 8):=(others=>' ');
signal dot:u8r_t:=(others=>'0');

--key
signal pressed, pressed_i : std_logic;
signal key : i4_t;

--dht11
signal temp_int, hum_int : integer range 0 to 99;

--f(1khz)
signal msec,load:i32_t;
signal ena:std_logic;

--lcd_draw
signal bg_color, text_color : l_px_t;
signal addr : l_addr_t;
signal text_size : integer range 1 to 12;
signal data : string(1 to 12);
signal font_start,font_busy,lcd_clear : std_logic;
signal draw_done,draw_start : std_logic;
signal x, y : integer range 0 to 159;

--tts
signal tts_ena : std_logic;
signal tts_busy : std_logic;
constant max_len : integer := 100;
signal txt : u8_arr_t(0 to max_len - 1);
signal len : integer range 0 to max_len;
signal tts_done : std_logic;
--clk_1hz
signal clk_1hz, time_clk : std_logic;
--mode
type mode_t is (idle,buff,lcd_show,dht,tts,stop);
signal mode : mode_t;

--user
signal mins : integer range 0 to 59 := 0;
signal secs : integer range 0 to 59 := 50;
signal done : std_logic:='0';
--00 idle
signal lcd_count : integer range 0 to 8 ;
--01 dht
signal seg_func_count : integer range 0 to 4 ;
--10 tts
signal tts_count : integer range 0 to 6 ;
signal tts_play_count : integer range 0 to 3 ;
constant star : u8_arr_t(0 to 29) :=(
        x"a4", x"40", x"b0", x"7b", x"a4", x"40", x"b0", x"7b", x"ab", x"47", x"b4", x"b9", x"b4", x"b9", x"a1", x"40",
        x"ba", x"a1", x"a4", x"d1", x"b3", x"a3", x"ac", x"4f", x"a4", x"70", x"ac", x"50", x"ac", x"50"
);
constant bee : u8_arr_t(0 to 51) := (
        x"b6", x"e4", x"b6", x"e4", x"b6", x"e4", x"a1", x"41", x"b6", x"e4", x"b6", x"e4", x"b6", x"e4", x"a4", x"6a",
        x"ae", x"61", x"a4", x"40", x"b0", x"5f", x"b6", x"d4", x"b0", x"b5", x"a4", x"75", x"a8", x"d3", x"a5", x"5e",
        x"a5", x"5e", x"a1", x"41", x"a5", x"68", x"a5", x"5e", x"a5", x"5e", x"b0", x"b5", x"a4", x"75", x"bf", x"b3",
        x"a8", x"fd", x"bf", x"40"
);
constant tigers : u8_arr_t(0 to 31) := (
        x"a8", x"e2", x"b0", x"a6", x"a6", x"d1", x"aa", x"ea", x"20", x"a8", x"e2", x"b0", x"a6", x"a6", x"d1", x"aa",
        x"ea", x"20", x"b6", x"5d", x"b1", x"6f", x"a7", x"d6", x"20", x"b6", x"5d", x"b1", x"6f", x"a7", x"d6", x"20"
);
--11 lcd_show
------------------------------------------------------------------end signal

begin
----------------------------------------begin packages
	--------------------------------------f_1hz
	clk_inst : entity work.clk(arch)
		generic map(
			freq => 1
		)
		port map(
			clk_in  => clk,
			rst_n   => rst_n,
			clk_out => clk_1hz
		);
	------------------------------dht11
	dht_inst : entity work.dht(arch)
		port map(
			clk      => clk,
			rst_n    => rst_n,
			dht_data => dht_data,	--腳位 資料輸入/出
			temp_int => temp_int,	--輸出溫度(integer)
			temp_dec => open,		--輸出溫度(binary)
			hum_int  => hum_int,	--輸出濕度(integer)
			hum_dec  => open		--輸出濕度(binary)
		);
	------------------------------seg
	seg_inst : entity work.seg(arch)
		port map(
			clk     => clk,
			rst_n   => rst_n,
			seg_led => seg_led,		--腳位 a~g
			seg_com => seg_com,		--共同腳位
			data    => seg_data,	--七段資料 輸入要顯示字元即可,遮末則輸入空白
			dot     => dot			--小數點 1 亮
									--輸入資料ex: b"01000000" = x"70"  
									--seg_deg 度C
		);
	------------------------------4*4 keypad
	key_inst : entity work.key(arch)
		port map(
			clk     => clk,
			rst_n   => rst_n,
			key_row => key_row,		--腳位
			key_col => key_col,		--腳位
			pressed => pressed_i,	--pressed='1' 代表按住
			key     => key			--key=0 代表按下 key 1	key=1 代表按下 key 2...........
		);
	------------------------------timer (1kHz)
	timer_inst : entity work.timer(arch)
		port map(
			clk   => clk,
			rst_n => rst_n,		
			ena   => ena,			--當ena='0', msec=load
			load  => load,				--起始值
			msec  => msec			--毫秒數
		);
	------------------------------4*4 edge
	edge_inst : entity work.edge(arch)
		port map(
			clk     => clk,
			rst_n   => rst_n,
			sig_in  => pressed_i,	--輸入訊號(通常用在 4*4 keypad或計數)
			rising  => pressed,		--正緣 '1'觸發
			falling => open			--負緣 open=開路
		);
	------------------------------draw_done edge
	edge_inst1 : entity work.edge(arch)
		port map
		(
			clk     => clk,
			rst_n   => rst_n,
			sig_in  => font_busy,
			rising  => draw_start,
			falling => draw_done
		);
	------------------------------1hz edge
	edge_inst2 : entity work.edge(arch)
		port map
		(
			clk     => clk,
			rst_n   => rst_n,
			sig_in  => clk_1hz,
			rising  => time_clk,		
			falling => open			
		);
	------------------------------tts_done edge
	edge_inst3 : entity work.edge(arch)
		port map
		(
			clk     => clk,
			rst_n   => rst_n,
			sig_in  => tts_busy,
			rising  => open,		
			falling => tts_done			
		);
	------------------------------lcd
	lcd_draw : entity work.gen_font(arch)
		port map(
			clk        => clk,
			rst_n      => rst_n,
			x          => x,			-- 橫
			y          => y,			-- 縱
			font_start => font_start,	-- 畫面更新頻率(取正緣)
			font_busy  => font_busy,	-- 當畫面正在更新時，font_busy='1';
			text_size  => text_size,	-- 字體大小
			data       => data,			-- 資料
			text_color => text_color,	-- 字體顏色
			addr       => addr,			-- ?
			bg_color   => bg_color,		-- 背景顏色 black blue red magenta green cyan yellow white 
			clear      => lcd_clear,	-- 1 清除
			lcd_sclk   => lcd_sclk,		-- 腳位
			lcd_mosi   => lcd_mosi,		-- 腳位
			lcd_ss_n   => lcd_ss_n,		-- 腳位
			lcd_dc     => lcd_dc,		-- 腳位
			lcd_bl     => lcd_bl,		-- 腳位
			lcd_rst_n  => lcd_rst_n		-- 腳位

		);
	------------------------------tts	
	tts_inst: entity work.tts(arch)
		generic map (
				txt_len_max => max_len
			)
		port map (
			clk => clk,
			rst_n => rst_n,
			tts_scl => tts_scl,			--腳位
			tts_sda => tts_sda,			--腳位
			tts_mo => tts_mo,			--腳位
			tts_rst_n => tts_rst_n,		--腳位
			ena => tts_ena,				--enable 1致能
			busy => tts_busy,			--播報時busy='1'
			txt => txt,					--data(編碼產生=>tool=>tts.py=>compile=>輸入數目=>輸入名字=>輸入播報內容)
			txt_len => len				--長度
		);


---------------------------------------end packages
	Process(clk,rst_n)
	begin
		if rst_n='0' then
			lcd_count		<= 1;
			lcd_clear		<='1';
			font_start		<='0';
			seg_func_count	<= 0;
			seg_data		<= "        ";
			dot				<= "00000000";
			data			<= "            ";
			load			<= 0;
			ena				<='0';
			x				<= 0;
			y				<= 0;
			secs			<= 50;
			mins			<= 0;
			tts_count		<= 0;
			tts_ena			<='0';
			tts_play_count	<= 0;
		elsif rising_edge(clk) then
			if time_clk = '1' then		
				if secs = secs'high then
					secs <= 0;
					if mins = mins'high then
						mins <= 0;
					else
						mins <= mins + 1;
					end if;
				else
					secs <= secs + 1;
				end if;
			end if;
			if (pressed = '1') and (key = 12) then
				done<= not done;
			end if;
			case sw(6 to 7) is
				when "00" =>----idle
					mode<=buff;
				when "01" =>----dht
					seg_data<="        ";
					dot<="00000000";
					mode<=dht;
				when "10" =>----tts
					mode<=buff;
				when "11" =>----lcd_show
					mode<=lcd_show;
			end case;
			case mode is
				when buff =>
					font_start<='0';
					if font_busy='0' and sw(6 to 7)="00" then
						text_size<=1;
						mode<=idle;
					elsif font_busy='0' and sw(6 to 7)="10" then
						mode<=tts;
					end if;
				when idle =>
					lcd_clear<='0';
					font_start<='0';
					case lcd_count is
						when 1=>
							bg_color<=red;
							if y < y'high then
								if font_busy='0' then
									font_start<='1';
								end if;
								if draw_done='1' then 
									font_start<='0';
									y<=y+1;
								end if;
							else
								ena<='1';
								y<=0;
								if y>=y'high and msec>=500 then
									lcd_clear<='1';
									lcd_count<=2;
								end if;
							end if;
						when 2=>
							lcd_clear<='0';
							bg_color<=blue;
							if y <= y'high then
								if font_busy='0' then
									font_start<='1';
								end if;
								if draw_done='1' then 
									font_start<='0';
									y<=y+1;
								end if;
							else
								y<=0;
								if y>=y'high and msec>=1000 then
									lcd_clear<='1';
									lcd_count<=3;
								end if;
							end if;
						when 3=>
							lcd_clear<='0';
							bg_color<=white;
							if y <= y'high then
								if font_busy='0' then
									font_start<='1';
								end if;
								if draw_done='1' then 
									font_start<='0';
									y<=y+1;
								end if;
							else
								lcd_clear<='1';
								y<=10;
								text_color<=green;
								lcd_count<=4;
							end if;
						when 4=>
							lcd_clear<='0';
							y<=10;
							data<=" 1 2 3 4 5  ";
							font_start<='1';
							if draw_done='1' and msec>=1500 then
								font_start<='0';
								y<=30;
								lcd_count<=5;
							end if;
						when 5=>
							if y=30 then
								data<=" 6 7 8 9 0  ";
								font_start<='1';
							end if;
							if draw_done='1' and msec>=2000 then
								font_start<='0';
								y<=50;
								lcd_count<=6;
							end if;
						when 6=>
							if y=50 then
								data<=" Vol On Off ";
								font_start<='1';
							end if;
							if draw_done='1' and msec>=2500 then
								font_start<='0';
								y<=70;
								lcd_count<=7;
							end if;
						when 7=>
							if y=70 then
								data<=" P A N F T  ";
								font_start<='1';
							end if;
							if draw_done='1' and msec>=3000 then
								font_start<='0';
								y<=90;
								lcd_count<=8;
							end if;
						when 8=>
							if y=90 then
								data<=" , : _ .    ";
								font_start<='1';
							end if;
							if draw_done='1' and msec>=3500 then
								data<="            ";
								font_start<='0';
								lcd_count<=1;
								lcd_clear<='1';
								load<=0;
								ena<='0';
							end if;
						when others=>
					end case;
				when dht =>
					if done='1' then
						dot<="00100000";
						if pressed='1' then
							case key is
								when 8 =>
									if seg_func_count<4 then
										seg_func_count<=seg_func_count+1;
									else
										seg_func_count<=seg_func_count;
									end if;
								when 7 =>
									if seg_func_count>0	then
										seg_func_count<=seg_func_count-1;
									else
										seg_func_count<=seg_func_count;
									end if;
								when others=>
							end case;
						end if;
						case seg_func_count is
							when 0=>
								seg_data<="F0 00000";
							when 1=>
								seg_data<="F1  " & to_string(temp_int,temp_int'high,10,2) & seg_deg & 'C';
							when 2=>
								seg_data<="F2 " & to_string(hum_int,hum_int'high,10,2) & seg_deg & percent & 'o';
							when 3=>
								seg_data<="F3 FUnC1";
							when 4=>
								seg_data<="F4 FUnC2";
						end case;
					end if;
				when tts =>
					lcd_clear<='0';
					font_start<='0';
					if pressed='1' then
						case key is
							when 8 =>
								if tts_play_count<3 then
									tts_play_count<=tts_play_count+1;
								else
									tts_play_count<=tts_play_count;
								end if;
							when 7 =>
								if tts_play_count>0	then
									tts_play_count<=tts_play_count-1;
								else
									tts_play_count<=tts_play_count;
								end if;
							when others=>
						end case;
					end if;
					case tts_count is
						when 0 =>
							bg_color<=white;
							if y <= y'high then
								if font_busy='0' then
									font_start<='1';
								end if;
								if draw_done='1' then 
									font_start<='0';
									y<=y+1;
								end if;
							else
								if y>=y'high then
									lcd_clear<='1';
									y<=10;
									text_color<=green;
									tts_count<=1;
								end if;
							end if;
							lcd_clear<='0';
						when 1 =>
							lcd_clear<='0';
							y<=10;
							data<=" F1 , N , P ";
							
							font_start<='1';
							if draw_done='1' then
								font_start<='0';
								y<=30;
								tts_count<=2;
							end if;
						when 2 =>
							if y=30 then
								data<="File1:T1.wav";
								font_start<='1';
							end if;
							if draw_done='1' then
								font_start<='0';
								y<=50;
								tts_count<=3;
							end if;
						when 3 =>
							if y=50 then
								data<="      T2.wav";
								font_start<='1';
							end if;
							if draw_done='1' then
								font_start<='0';
								y<=70;
								tts_count<=4;
							end if;
						when 4 =>
							if y=70 then
								data<="      T3.wav";
								font_start<='1';
							end if;
							if draw_done='1' then
								font_start<='0';
								y<=90;
								tts_count<=5;
							end if;
						when 5 =>
							if y=90 then
								data<="Vol. :05    ";
								font_start<='1';
							end if;
							if draw_done='1' then
								font_start<='0';
								y<=110;
								tts_count<=6;
							end if;
						when 6 =>
							if y=110 then
								data<="T    :"&to_string(mins,mins'high,10,2)&":"&to_string(secs,secs'high,10,2)&" ";
								font_start<='1';
							end if;
							if draw_done='1' then
								font_start<='0';
								y<=110;
								data<="            ";
								font_start<='0';
								tts_count<=1;
							end if;
						when others=>
					end case;
					case tts_play_count is
						when 0=>
							tts_ena<='0';
							len<=0;
						when 1=>
							tts_ena<='1';
							if pressed='1' and key=10 then
								txt(0 to 29)<=star;
								len<=30;
								if tts_done='1' then
									tts_play_count<=0;
								end if;
							end if;
						when 2=>
							tts_ena<='1';
							if pressed='1' and key=10 then
								txt(0 to 51)<=bee;
								len<=52;
								if tts_done='1' then
									tts_play_count<=0;
								end if;
							end if;
						when 3=>
							tts_ena<='1';
							if pressed='1' and key=10 then
								txt(0 to 31)<=tigers;
								len<=32;
								if tts_done='1' then
									tts_play_count<=0;
								end if;
							end if;
						when others=>
					end case;
				when lcd_show =>null;
				when stop =>null;
			end case;
		end if;

		
	end process;
end architecture;