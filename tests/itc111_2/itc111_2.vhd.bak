library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

use work.itc.all;
use work.itc_lcd.all;

entity itc111_2 is
	port (

		clk, rst_n : in std_logic;

		-- lcd
		lcd_sclk, lcd_mosi, lcd_ss_n, lcd_dc, lcd_bl, lcd_rst_n : out std_logic;

		-- sw
		sw : in u8r_t;

		-- seg
		seg_led, seg_com : out u8r_t;

		-- key
		key_row : in u4r_t;
		key_col : out u4r_t;

		--led
		rgb                 : out std_logic_vector(0 to 2);

		--dot
		dot_red, dot_green, dot_com : out u8r_t;

		--buzzer
		buz : out std_logic;

		-- --uart
		uart_rx : in std_logic;  -- receive pin
		uart_tx : out std_logic; -- transmit pin
		dbg_b   : out u8r_t
	);
end itc111_2;

architecture arch of itc111_2 is

	------------------------------------------------------------------signal
	--user
	signal inter_rst : std_logic;
	signal keypad : character;
	--seg
	signal seg_data:string(1 to 8):=(others=>' ');
	signal seg_dot:u8r_t:=(others=>'0');
	
	--key
	signal pressed, pressed_i : std_logic;
	signal key : i4_t;
	
	--f(1khz)
	signal msec,load:i32_t;
	signal timer_ena:std_logic;
	
	--lcd_draw
	signal bg_color, text_color : l_px_t;
	signal addr : l_addr_t;
	signal text_size : integer range 1 to 12;
	signal data : string(1 to 12);
	signal font_start,font_busy,lcd_clear : std_logic;
	signal draw_done,draw_start : std_logic;
	signal x : integer range -5 to 159;
	signal y : integer range 0 to 159;
	
	--clk_1hz
	signal clk_1hz, time_clk : std_logic;

	--mode
	type mode_t is (start,idle,value_add,change,loan,p2e);
	signal mode : mode_t;
	--currency
	type currency_t is (LIF,JOY,LOV);
	signal currency : currency_t;
	signal coco_LIF,coco_JOY,coco_LOV:i32_t;
	--8*8 dot led
	--green
	constant guy		: u8r_arr_t(0 to 7) := (x"00", x"00", x"80", x"C0", x"E0", x"C0", x"80", x"00");
	constant bullet_g1	: u8r_arr_t(0 to 7) := (x"00", x"00", x"80", x"C0", x"F0", x"C0", x"80", x"00");
	constant bullet_g2	: u8r_arr_t(0 to 7) := (x"00", x"00", x"80", x"C0", x"E4", x"C0", x"80", x"00");
	--red
	constant enemy		: u8r_arr_t(0 to 7) := (x"00", x"00", x"00", x"00", x"03", x"03", x"00", x"00");
	constant bullet_r1 : u8r_arr_t(0 to 7) := (x"00", x"00", x"00", x"00", x"13", x"03", x"00", x"00");
	constant bullet_r2 : u8r_arr_t(0 to 7) := (x"00", x"00", x"00", x"00", x"07", x"03", x"00", x"00");

	constant dot_clear : u8r_arr_t(0 to 7) := (x"00", x"00", x"00", x"00", x"00", x"00", x"00", x"00");
	signal data_g, data_r : u8r_arr_t(0 to 7);
	--uart
	signal tx_data, rx_data : u8_t := x"00";
	signal rx_start, rx_done : std_logic;
	signal tx_ena, tx_busy, rx_busy, rx_err : std_logic;

	--value_add
	signal add_count:i32_t;
	signal add_lcd_count : integer range 0 to 6;
	signal count : integer range 0 to 50;
	signal pass : u8_arr_t(0 to 3);

	--change
	type exchange_t is (idle,setup,number,confirm,show);
	signal exchange : exchange_t;
	signal set_money : string(1 to 4);
	signal key_number : integer range 0 to 9999:=0;
	signal Q1000,Q100,Q10,Q1 : integer range 0 to 9999:=0;
	--loan
	signal money : integer range 0 to 5000:=0;
	signal interest : integer range 0 to 100:=0;

	--P2E
	type Play_to_earn_t is (idle,show,shoot,end_game);
	signal Play : Play_to_earn_t;
	signal end_flag,game_done : std_logic;
	------------------------------------------------------------------end signal
	
	begin
	----------------------------------------begin packages
		--------------------------------------f_1hz
		clk_inst : entity work.clk(arch)
			generic map(
				freq => 1
			)
			port map(
				clk_in  => clk,
				rst_n   => rst_n,
				clk_out => clk_1hz
			);
		------------------------------8*8 dot led
		dot_inst : entity work.dot(arch)
			generic map(
					common_anode => '0'
				)
			port map(
				clk       => clk,			
				rst_n     => rst_n,			
				dot_red   => dot_red,		--腳位
				dot_green => dot_green,		--腳位
				dot_com   => dot_com,		--腳位
				data_r    => data_g,		--紅色資料
				data_g    => data_r			--綠色資料
			);
		----------------------seg
		seg_inst : entity work.seg(arch)
			port map(
				clk     => clk,
				rst_n   => rst_n,
				seg_led => seg_led,		--腳位 a~g
				seg_com => seg_com,		--共同腳位
				data    => seg_data,	--七段資料 輸入要顯示字元即可,遮末則輸入空白
				dot     => seg_dot			--小數點 1 亮
										--輸入資料ex: b"01000000" = x"70"  
										--seg_deg 度C
			);
		------------------------------4*4 keypad
		key_inst : entity work.key(arch)
			port map(
				clk     => clk,
				rst_n   => rst_n,
				key_row => key_row,		--腳位
				key_col => key_col,		--腳位
				pressed => pressed_i,	--pressed='1' 代表按住
				key     => key			--key=0 代表按下 key 1	key=1 代表按下 key 2...........
			);
		------------------------------timer (1kHz)
		timer_inst : entity work.timer(arch)
			port map(
				clk   => clk,
				rst_n => rst_n,		
				ena   => timer_ena,			--當ena='0', msec=load
				load  => load,			--起始值
				msec  => msec			--毫秒數
			);
		------------------------------4*4 edge
		edge_inst : entity work.edge(arch)
			port map(
				clk     => clk,
				rst_n   => rst_n,
				sig_in  => pressed_i,	--輸入訊號(通常用在 4*4 keypad或計數)
				rising  => pressed,		--正緣 '1'觸發
				falling => open			--負緣 open=開路
			);
		------------------------------draw_done edge
		edge_inst1 : entity work.edge(arch)
			port map
			(
				clk     => clk,
				rst_n   => rst_n,
				sig_in  => font_busy,
				rising  => draw_start,
				falling => draw_done
			);
		------------------------------1hz edge
		edge_inst2 : entity work.edge(arch)
			port map
			(
				clk     => clk,
				rst_n   => rst_n,
				sig_in  => clk_1hz,
				rising  => time_clk,		
				falling => open			
			);
		------------------------------rx_busy edge
		edge_inst3 : entity work.edge(arch)
			port map(
				clk     => clk,
				rst_n   => rst_n,
				sig_in  => rx_busy,
				rising  => rx_start,
				falling => rx_done
			);
		------------------------------game_done edge
		edge_inst4 : entity work.edge(arch)
			port map(
				clk     => clk,
				rst_n   => rst_n,
				sig_in  => end_flag,
				rising  => game_done,
				falling => open
			);
		------------------------------uart
		uart_inst : entity work.uart(arch)
			generic map(
				baud => 9600
			)
			port map(
				clk     => clk,
				rst_n   => rst_n,
				uart_rx => uart_rx,
				uart_tx => uart_tx,
				tx_ena  => tx_ena,
				tx_busy => tx_busy,
				tx_data => tx_data,
				rx_busy => rx_busy,
				rx_err  => rx_err,
				rx_data => rx_data
			);
		
		------------------------------lcd
		lcd_draw : entity work.gen_font(arch)
			port map(
				clk        => clk,
				rst_n      => rst_n,
				x          => x,			-- 橫
				y          => y,			-- 縱
				font_start => font_start,	-- 畫面更新頻率(取正緣)
				font_busy  => font_busy,	-- 當畫面正在更新時，font_busy='1';
				text_size  => text_size,	-- 字體大小
				data       => data,			-- 資料
				text_color => text_color,	-- 字體顏色
				addr       => addr,			-- ?
				bg_color   => bg_color,		-- 背景顏色 black blue red magenta green cyan yellow white 
				clear      => lcd_clear,	-- 1 清除
				lcd_sclk   => lcd_sclk,		-- 腳位
				lcd_mosi   => lcd_mosi,		-- 腳位
				lcd_ss_n   => lcd_ss_n,		-- 腳位
				lcd_dc     => lcd_dc,		-- 腳位
				lcd_bl     => lcd_bl,		-- 腳位
				lcd_rst_n  => lcd_rst_n		-- 腳位
	
			);
	
	---------------------------------------end packages
		inter_rst <= '0' when (key = 7) and (pressed = '1')else
					 '1';
		keypad <=
		'7' when (pressed = '1') and (key = 0) else
		'8' when (pressed = '1') and (key = 1) else
		'9' when (pressed = '1') and (key = 2) else
		'0' when (pressed = '1') and (key = 3) else
		'4' when (pressed = '1') and (key = 4) else
		'5' when (pressed = '1') and (key = 5) else
		'6' when (pressed = '1') and (key = 6) else
		'1' when (pressed = '1') and (key = 8) else
		'2' when (pressed = '1') and (key = 9) else
		'3' when (pressed = '1') and (key = 10) ;
		Process(clk,rst_n,inter_rst)
		begin
			if rst_n='0' or inter_rst='0' then
				rgb			<="000";
				timer_ena	<='0';
				font_start	<='0';
				load		<= 0;
				mode		<= start;
				bg_color	<= white;
				lcd_clear	<= '1';
				money		<= 0;
				interest	<= 0;
				Play		<= idle;
				data_g		<= dot_clear;
				data_r		<= dot_clear;
				set_money	<= "    ";
			elsif rising_edge(clk) then
				case mode is 
					when start=>
						coco_LIF<=1000;
						coco_JOY<=1000;
						coco_LOV<=1000;
						mode<=idle;
					when idle=>
						timer_ena<='1';
						seg_data<="        ";
						if pressed='1' and key=14 then
							rgb<="000";
							case sw(0 to 3) is
								when "1000" =>
									mode<=value_add;
								when "0100" =>
									mode<=change;
									exchange<=idle;--(idle,setup,confirm);
								when "0010" =>
									mode<=loan;
								when "0001" =>
									mode<=p2e;
									Play<=idle;
								when others => 
									mode<=idle;
							end case;
						else
							case msec is
								when 0 to 1000 =>
									rgb<="100";
								when 1001 to 2000 =>
									rgb<="010";
								when 2001 to 3000 =>
									rgb<="001";
								when others=>
									seg_data<="        ";
									seg_dot<="00000000";
									lcd_clear<='0';
									bg_color<=white;
									if y < y'high then
										if font_busy='0' then
											font_start<='1';
										end if;
										if draw_done='1' then 
											font_start<='0';
											y<=y+1;
										end if;
									else
										load<=0;
										timer_ena<='0';
										lcd_clear<='1';
									end if;		
							end case;
						end if;
					when value_add=>
						if pressed='1' and key=14 then
							case sw(0 to 3) is
								when "1000" =>
									currency<=LIF;
								when "1100" =>
									currency<=JOY;
								when "1110" =>
									currency<=LOV;
								when others=>null;
							end case;
						end if;
						lcd_clear<='0';
						case add_lcd_count is
							when 0 =>
								x<=5;
								y<=0;
								case currency is 
									when LIF=>
										data<="    LIF     ";
									when JOY=>
										data<="    JOY     ";
									when LOV=>
										data<="    LOV     ";
									when others=>
										data<="            ";
								end case;
								font_start<='1';
								if draw_done='1' then
									font_start<='0';
									y<=20;
									add_lcd_count<=1;
								end if;
							when 1 =>
								x<=0;
								data<="    "&to_string(to_integer(rx_data),9999,10,4)&"    ";
								if rx_done = '1' then
									if to_integer(rx_data) = 13 then
										tx_ena <= '0';
										count <= 0;
									else
										tx_ena <= '0';
										pass(count) <= rx_data;
										count <= count + 1;
									end if;
								end if;
								font_start<='1';
								if draw_done='1' then
									font_start<='0';
									y<=0;
									add_lcd_count<=0;
								end if;
							when others=>null;
						end case;
						-- if time_clk='1' then
						-- 	if add_count>99999999 then
						-- 		add_count<=0;
						-- 	else
						-- 		add_count<=add_count+500;
						-- 	end if;
						-- end if;
						-- seg_data<=to_string(add_count,99999999,10,8);
						-- seg_dot<="00000000";
						if pressed='1' and key=12 then
							seg_data<="        ";
							add_count<=0;
							mode<=idle;
						end if;
					when change=> 
						case exchange is 
							when idle=>
								Q1<=0;
								Q10<=0;
								Q100<=0;
								Q1000<=0;
								set_money<="    ";
								key_number<=0;
								case sw(0 to 3) is
									when "1000" =>
										currency<=LIF;
									when "1100" =>
										currency<=JOY;
									when "1110" =>
										currency<=LOV;
									when others=>null;
								end case;
								case currency is
									when LIF=>
										seg_data<="LIF "&to_string(coco_LIF,9999,10,4);
									when JOY=>
										seg_data<="JoY "&to_string(coco_JOY,9999,10,4);
									when LOV=>
										seg_data<="Lov "&to_string(coco_LOV,9999,10,4);
									when others=>null;
								end case;
								if pressed='1' and key=14 then
									exchange<=setup;
								end if;
							when setup=>
								if key<12 and key/=7 and pressed='1' then
									set_money<=set_money(2 to 4)&keypad;
								end if;
								case currency is
									when LIF=>
										seg_data<=to_string(coco_LIF,9999,10,4)&set_money;
									when JOY=>
										seg_data<=to_string(coco_JOY,9999,10,4)&set_money;
									when LOV=>
										seg_data<=to_string(coco_LOV,9999,10,4)&set_money;
									when others=>null;
								end case;
								if key=14 and pressed='1' then
									exchange<=number;
									case set_money(1) is
										when '1' =>
											Q1000<=1000;
										when '2' =>
											Q1000<=2000;
										when '3' =>
											Q1000<=3000;
										when '4' =>
											Q1000<=4000;
										when '5' =>
											Q1000<=5000;
										when '6' =>
											Q1000<=6000;
										when '7' =>
											Q1000<=7000;
										when '8' =>
											Q1000<=8000;
										when '9' =>
											Q1000<=9000;
										when others=>
											Q1000<=0;
									end case;
									case set_money(2) is
										when '1' =>
											Q100<=100;
										when '2' =>
											Q100<=200;
										when '3' =>
											Q100<=300;
										when '4' =>
											Q100<=400;
										when '5' =>
											Q100<=500;
										when '6' =>
											Q100<=600;
										when '7' =>
											Q100<=700;
										when '8' =>
											Q100<=800;
										when '9' =>
											Q100<=900;
										when others=>
											Q100<=0;
									end case;
									case set_money(3) is
										when '1' =>
											Q10<=10;
										when '2' =>
											Q10<=20;
										when '3' =>
											Q10<=30;
										when '4' =>
											Q10<=40;
										when '5' =>
											Q10<=50;
										when '6' =>
											Q10<=60;
										when '7' =>
											Q10<=70;
										when '8' =>
											Q10<=80;
										when '9' =>
											Q10<=90;
										when others=>
											Q1000<=0;
									end case;
									case set_money(4) is
										when '1' =>
											Q1<=1;
										when '2' =>
											Q1<=2;
										when '3' =>
											Q1<=3;
										when '4' =>
											Q1<=4;
										when '5' =>
											Q1<=5;
										when '6' =>
											Q1<=6;
										when '7' =>
											Q1<=7;
										when '8' =>
											Q1<=8;
										when '9' =>
											Q1<=9;
										when others=>
											Q1000<=0;
									end case;
								end if;
							when number=>
								key_number<=Q1000+Q100+Q10+Q1;
								exchange<=confirm;
							when confirm=>
								case currency is
									when LIF=>
										if key_number<=coco_LIF then
											coco_LIF<=coco_LIF-key_number;
											exchange<=show;
										else
											seg_data<="Err     ";
											if pressed='1' and key=14 then
												exchange<=idle;
											end if;
										end if;
									when JOY=>
										if key_number<=coco_JOY then
											coco_JOY<=coco_JOY-key_number;
											exchange<=show;
										else
											seg_data<="Err     ";
											if pressed='1' and key=14 then
												exchange<=idle;
											end if;
										end if;
									when LOV=>
										if key_number<=coco_LOV then
											coco_LOV<=coco_LOV-key_number;
											exchange<=show;
										else
											seg_data<="Err     ";
											if pressed='1' and key=14 then
												exchange<=idle;
											end if;
										end if;
									when others=>null;
								end case;
							when show=>
								set_money<="    ";
								case currency is
									when LIF=>
										seg_data<="Succ"&to_string(coco_LIF,9999,10,4);
										if pressed='1' and key=14 then
											mode<=idle;
										end if;
									when JOY=>
										seg_data<="Succ"&to_string(coco_JOY,9999,10,4);
										if pressed='1' and key=14 then
											mode<=idle;
										end if;
									when LOV=>
										seg_data<="Succ"&to_string(coco_LOV,9999,10,4);
										if pressed='1' and key=14 then
											mode<=idle;
										end if;
									when others=>null;
								end case;
							when others=>null;
						end case;
						
					when loan=>
						if pressed='1' and key=15 then
							if money>=5000 then
								money<=5000;
								interest<=100;
							else
								money<=money+500;
							end if;
						end if;
						interest<=(money*2)/100;
						if interest<100 then
							seg_data<=to_string(money,5000,10,4)&"  "&to_string(interest,99,10,2);
						else
							seg_data<=to_string(money,5000,10,4)&" "&to_string(interest,100,10,3);
						end if; 
						if pressed='1' and key=14 then
							seg_data<="        ";
							money<=0;
							interest<=0;
							mode<=idle;
						end if;
					when p2e=>
						if pressed='1' and key=14 then
							case sw(0 to 3) is
								when "1000" =>
									currency<=LIF;
								when "1100" =>
									currency<=JOY;
								when "1110" =>
									currency<=LOV;
								when others=>null;
							end case;
							case currency is
								when LIF=>
									seg_data<="LIF "&to_string(coco_LIF,9999,10,4);
								when JOY=>
									seg_data<="JoY "&to_string(coco_JOY,9999,10,4);
								when LOV=>
									seg_data<="Lov "&to_string(coco_LOV,9999,10,4);
								when others=>null;
							end case;
							Play<=show;
						end if;
						case Play is
							when idle=>
								if pressed='1' and key=15 then
									Play<=show;
								end if;
								data_g <= dot_clear;
								data_r <= dot_clear;
								timer_ena<='0';
								end_flag<='0';
								load<=0;
							when show=>
								data_g <= guy;
								data_r <= enemy;
								if pressed='1' and key=5 then
									Play<=shoot;
								end if;
							when shoot=>
								timer_ena<='1';
								if msec<1000 then
									data_g <= bullet_g1;
									data_r <= bullet_r1;
								elsif msec<=2000 then
									data_g <= bullet_g2;
									data_r <= bullet_r2;
								elsif msec<=2500 then
									end_flag<='1';
									data_g <= guy;
									data_r <= dot_clear;
									timer_ena<='0';
									load<=0;
								end if;
								if game_done='1' then
									case currency is
										when LIF=>
											coco_LIF<=coco_LIF+100;
										when JOY=>
											coco_JOY<=coco_JOY+100;
										when LOV=>
											coco_LOV<=coco_LOV+100;
										when others=>null;
									end case;
									Play<=end_game;
								end if;
							when end_game=>
								case currency is
									when LIF=>
										seg_data<="LIF "&to_string(coco_LIF,9999,10,4);
									when JOY=>
										seg_data<="JoY "&to_string(coco_JOY,9999,10,4);
									when LOV=>
										seg_data<="Lov "&to_string(coco_LOV,9999,10,4);
									when others=>null;
								end case;
								if pressed='1' and key= 14 then 
									mode<=idle;
									data_g<=dot_clear;
									data_r<=dot_clear;
								end if;
							when others=>null;
						end case;
					when others=>null;
				end case;
			end if;
		end process;
	end architecture;